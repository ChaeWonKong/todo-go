// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domains "todo-clone/modules/domains"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id uint64) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: offset, limit
func (_m *Service) FindAll(offset int, limit int) ([]domains.Item, error) {
	ret := _m.Called(offset, limit)

	var r0 []domains.Item
	if rf, ok := ret.Get(0).(func(int, int) []domains.Item); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *Service) FindOne(id uint64) (*domains.Item, error) {
	ret := _m.Called(id)

	var r0 *domains.Item
	if rf, ok := ret.Get(0).(func(uint64) *domains.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: item
func (_m *Service) Insert(item *domains.Item) (int64, error) {
	ret := _m.Called(item)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domains.Item) int64); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domains.Item) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, title
func (_m *Service) Update(id uint64, title string) (*domains.Item, error) {
	ret := _m.Called(id, title)

	var r0 *domains.Item
	if rf, ok := ret.Get(0).(func(uint64, string) *domains.Item); ok {
		r0 = rf(id, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, string) error); ok {
		r1 = rf(id, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
