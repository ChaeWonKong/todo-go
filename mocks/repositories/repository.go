// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import domains "todo-go/modules/domains"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AutoMigrate provides a mock function with given fields: dst
func (_m *Repository) AutoMigrate(dst ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dst...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOne provides a mock function with given fields: item
func (_m *Repository) CreateOne(item *domains.Item) (int64, error) {
	ret := _m.Called(item)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*domains.Item) int64); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domains.Item) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: id
func (_m *Repository) DeleteOne(id uint64) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint64) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *Repository) FindOne(id uint64) (interface{}, error) {
	ret := _m.Called(id)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint64) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: id, updateDto
func (_m *Repository) UpdateOne(id uint64, updateDto map[string]interface{}) (domains.Item, error) {
	ret := _m.Called(id, updateDto)

	var r0 domains.Item
	if rf, ok := ret.Get(0).(func(uint64, map[string]interface{}) domains.Item); ok {
		r0 = rf(id, updateDto)
	} else {
		r0 = ret.Get(0).(domains.Item)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, map[string]interface{}) error); ok {
		r1 = rf(id, updateDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
